// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Upload is an object representing the database table.
type Upload struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Cid         string    `boil:"cid" json:"cid" toml:"cid" yaml:"cid"`
	TraceID     string    `boil:"trace_id" json:"trace_id" toml:"trace_id" yaml:"trace_id"`
	FileSize    int       `boil:"file_size" json:"file_size" toml:"file_size" yaml:"file_size"`
	Region      string    `boil:"region" json:"region" toml:"region" yaml:"region"`
	KuboVersion string    `boil:"kubo_version" json:"kubo_version" toml:"kubo_version" yaml:"kubo_version"`
	PeerID      string    `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *uploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadColumns = struct {
	ID          string
	Cid         string
	TraceID     string
	FileSize    string
	Region      string
	KuboVersion string
	PeerID      string
	CreatedAt   string
}{
	ID:          "id",
	Cid:         "cid",
	TraceID:     "trace_id",
	FileSize:    "file_size",
	Region:      "region",
	KuboVersion: "kubo_version",
	PeerID:      "peer_id",
	CreatedAt:   "created_at",
}

var UploadTableColumns = struct {
	ID          string
	Cid         string
	TraceID     string
	FileSize    string
	Region      string
	KuboVersion string
	PeerID      string
	CreatedAt   string
}{
	ID:          "uploads.id",
	Cid:         "uploads.cid",
	TraceID:     "uploads.trace_id",
	FileSize:    "uploads.file_size",
	Region:      "uploads.region",
	KuboVersion: "uploads.kubo_version",
	PeerID:      "uploads.peer_id",
	CreatedAt:   "uploads.created_at",
}

// Generated where

var UploadWhere = struct {
	ID          whereHelperint
	Cid         whereHelperstring
	TraceID     whereHelperstring
	FileSize    whereHelperint
	Region      whereHelperstring
	KuboVersion whereHelperstring
	PeerID      whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"uploads\".\"id\""},
	Cid:         whereHelperstring{field: "\"uploads\".\"cid\""},
	TraceID:     whereHelperstring{field: "\"uploads\".\"trace_id\""},
	FileSize:    whereHelperint{field: "\"uploads\".\"file_size\""},
	Region:      whereHelperstring{field: "\"uploads\".\"region\""},
	KuboVersion: whereHelperstring{field: "\"uploads\".\"kubo_version\""},
	PeerID:      whereHelperstring{field: "\"uploads\".\"peer_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"uploads\".\"created_at\""},
}

// UploadRels is where relationship names are stored.
var UploadRels = struct {
}{}

// uploadR is where relationships are stored.
type uploadR struct {
}

// NewStruct creates a new relationship struct
func (*uploadR) NewStruct() *uploadR {
	return &uploadR{}
}

// uploadL is where Load methods for each relationship are stored.
type uploadL struct{}

var (
	uploadAllColumns            = []string{"id", "cid", "trace_id", "file_size", "region", "kubo_version", "peer_id", "created_at"}
	uploadColumnsWithoutDefault = []string{"cid", "trace_id", "file_size", "region", "kubo_version", "peer_id", "created_at"}
	uploadColumnsWithDefault    = []string{"id"}
	uploadPrimaryKeyColumns     = []string{"id"}
	uploadGeneratedColumns      = []string{"id"}
)

type (
	// UploadSlice is an alias for a slice of pointers to Upload.
	// This should almost always be used instead of []Upload.
	UploadSlice []*Upload
	// UploadHook is the signature for custom Upload hook methods
	UploadHook func(context.Context, boil.ContextExecutor, *Upload) error

	uploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadType                 = reflect.TypeOf(&Upload{})
	uploadMapping              = queries.MakeStructMapping(uploadType)
	uploadPrimaryKeyMapping, _ = queries.BindMapping(uploadType, uploadMapping, uploadPrimaryKeyColumns)
	uploadInsertCacheMut       sync.RWMutex
	uploadInsertCache          = make(map[string]insertCache)
	uploadUpdateCacheMut       sync.RWMutex
	uploadUpdateCache          = make(map[string]updateCache)
	uploadUpsertCacheMut       sync.RWMutex
	uploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadAfterSelectMu sync.Mutex
var uploadAfterSelectHooks []UploadHook

var uploadBeforeInsertMu sync.Mutex
var uploadBeforeInsertHooks []UploadHook
var uploadAfterInsertMu sync.Mutex
var uploadAfterInsertHooks []UploadHook

var uploadBeforeUpdateMu sync.Mutex
var uploadBeforeUpdateHooks []UploadHook
var uploadAfterUpdateMu sync.Mutex
var uploadAfterUpdateHooks []UploadHook

var uploadBeforeDeleteMu sync.Mutex
var uploadBeforeDeleteHooks []UploadHook
var uploadAfterDeleteMu sync.Mutex
var uploadAfterDeleteHooks []UploadHook

var uploadBeforeUpsertMu sync.Mutex
var uploadBeforeUpsertHooks []UploadHook
var uploadAfterUpsertMu sync.Mutex
var uploadAfterUpsertHooks []UploadHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upload) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upload) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upload) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upload) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upload) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upload) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upload) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upload) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upload) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadHook registers your hook function for all future operations.
func AddUploadHook(hookPoint boil.HookPoint, uploadHook UploadHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadAfterSelectMu.Lock()
		uploadAfterSelectHooks = append(uploadAfterSelectHooks, uploadHook)
		uploadAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		uploadBeforeInsertMu.Lock()
		uploadBeforeInsertHooks = append(uploadBeforeInsertHooks, uploadHook)
		uploadBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		uploadAfterInsertMu.Lock()
		uploadAfterInsertHooks = append(uploadAfterInsertHooks, uploadHook)
		uploadAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		uploadBeforeUpdateMu.Lock()
		uploadBeforeUpdateHooks = append(uploadBeforeUpdateHooks, uploadHook)
		uploadBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		uploadAfterUpdateMu.Lock()
		uploadAfterUpdateHooks = append(uploadAfterUpdateHooks, uploadHook)
		uploadAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		uploadBeforeDeleteMu.Lock()
		uploadBeforeDeleteHooks = append(uploadBeforeDeleteHooks, uploadHook)
		uploadBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		uploadAfterDeleteMu.Lock()
		uploadAfterDeleteHooks = append(uploadAfterDeleteHooks, uploadHook)
		uploadAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		uploadBeforeUpsertMu.Lock()
		uploadBeforeUpsertHooks = append(uploadBeforeUpsertHooks, uploadHook)
		uploadBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		uploadAfterUpsertMu.Lock()
		uploadAfterUpsertHooks = append(uploadAfterUpsertHooks, uploadHook)
		uploadAfterUpsertMu.Unlock()
	}
}

// One returns a single upload record from the query.
func (q uploadQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Upload, error) {
	o := &Upload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for uploads")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Upload records from the query.
func (q uploadQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadSlice, error) {
	var o []*Upload

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Upload slice")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Upload records in the query.
func (q uploadQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count uploads rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if uploads exists")
	}

	return count > 0, nil
}

// Uploads retrieves all the records using an executor.
func Uploads(mods ...qm.QueryMod) uploadQuery {
	mods = append(mods, qm.From("\"uploads\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"uploads\".*"})
	}

	return uploadQuery{q}
}

// FindUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpload(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Upload, error) {
	uploadObj := &Upload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uploads\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from uploads")
	}

	if err = uploadObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadObj, err
	}

	return uploadObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upload) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no uploads provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadInsertCacheMut.RLock()
	cache, cached := uploadInsertCache[key]
	uploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, uploadGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into uploads")
	}

	if !cached {
		uploadInsertCacheMut.Lock()
		uploadInsertCache[key] = cache
		uploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Upload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upload) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadUpdateCacheMut.RLock()
	cache, cached := uploadUpdateCache[key]
	uploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, uploadGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, append(wl, uploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for uploads")
	}

	if !cached {
		uploadUpdateCacheMut.Lock()
		uploadUpdateCache[key] = cache
		uploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for uploads")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all upload")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upload) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no uploads provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadUpsertCacheMut.RLock()
	cache, cached := uploadUpsertCache[key]
	uploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, uploadGeneratedColumns)
		update = strmangle.SetComplement(update, uploadGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert uploads, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(uploadPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert uploads, could not build conflict column list")
			}

			conflict = make([]string, len(uploadPrimaryKeyColumns))
			copy(conflict, uploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"uploads\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert uploads")
	}

	if !cached {
		uploadUpsertCacheMut.Lock()
		uploadUpsertCache[key] = cache
		uploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Upload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upload) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Upload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadPrimaryKeyMapping)
	sql := "DELETE FROM \"uploads\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for uploads")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for uploads")
	}

	if len(uploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upload) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpload(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uploads\".* FROM \"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadSlice")
	}

	*o = slice

	return nil
}

// UploadExists checks if the Upload row exists.
func UploadExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uploads\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if uploads exists")
	}

	return exists, nil
}

// Exists checks if the Upload row exists.
func (o *Upload) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadExists(ctx, exec, o.ID)
}
