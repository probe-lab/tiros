// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Measurement is an object representing the database table.
type Measurement struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RunID      int         `boil:"run_id" json:"run_id" toml:"run_id" yaml:"run_id"`
	Website    string      `boil:"website" json:"website" toml:"website" yaml:"website"`
	URL        string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Type       string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Try        int16       `boil:"try" json:"try" toml:"try" yaml:"try"`
	TTFB       null.String `boil:"ttfb" json:"ttfb,omitempty" toml:"ttfb" yaml:"ttfb,omitempty"`
	FCP        null.String `boil:"fcp" json:"fcp,omitempty" toml:"fcp" yaml:"fcp,omitempty"`
	LCP        null.String `boil:"lcp" json:"lcp,omitempty" toml:"lcp" yaml:"lcp,omitempty"`
	Metrics    null.JSON   `boil:"metrics" json:"metrics,omitempty" toml:"metrics" yaml:"metrics,omitempty"`
	Error      null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Tti        null.String `boil:"tti" json:"tti,omitempty" toml:"tti" yaml:"tti,omitempty"`
	CLS        null.String `boil:"cls" json:"cls,omitempty" toml:"cls" yaml:"cls,omitempty"`
	TtiRating  null.String `boil:"tti_rating" json:"tti_rating,omitempty" toml:"tti_rating" yaml:"tti_rating,omitempty"`
	CLSRating  null.String `boil:"cls_rating" json:"cls_rating,omitempty" toml:"cls_rating" yaml:"cls_rating,omitempty"`
	TTFBRating null.String `boil:"ttfb_rating" json:"ttfb_rating,omitempty" toml:"ttfb_rating" yaml:"ttfb_rating,omitempty"`
	FCPRating  null.String `boil:"fcp_rating" json:"fcp_rating,omitempty" toml:"fcp_rating" yaml:"fcp_rating,omitempty"`
	LCPRating  null.String `boil:"lcp_rating" json:"lcp_rating,omitempty" toml:"lcp_rating" yaml:"lcp_rating,omitempty"`
	StatusCode null.Int    `boil:"status_code" json:"status_code,omitempty" toml:"status_code" yaml:"status_code,omitempty"`
	Body       null.String `boil:"body" json:"body,omitempty" toml:"body" yaml:"body,omitempty"`

	R *measurementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L measurementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MeasurementColumns = struct {
	ID         string
	RunID      string
	Website    string
	URL        string
	Type       string
	Try        string
	TTFB       string
	FCP        string
	LCP        string
	Metrics    string
	Error      string
	CreatedAt  string
	Tti        string
	CLS        string
	TtiRating  string
	CLSRating  string
	TTFBRating string
	FCPRating  string
	LCPRating  string
	StatusCode string
	Body       string
}{
	ID:         "id",
	RunID:      "run_id",
	Website:    "website",
	URL:        "url",
	Type:       "type",
	Try:        "try",
	TTFB:       "ttfb",
	FCP:        "fcp",
	LCP:        "lcp",
	Metrics:    "metrics",
	Error:      "error",
	CreatedAt:  "created_at",
	Tti:        "tti",
	CLS:        "cls",
	TtiRating:  "tti_rating",
	CLSRating:  "cls_rating",
	TTFBRating: "ttfb_rating",
	FCPRating:  "fcp_rating",
	LCPRating:  "lcp_rating",
	StatusCode: "status_code",
	Body:       "body",
}

var MeasurementTableColumns = struct {
	ID         string
	RunID      string
	Website    string
	URL        string
	Type       string
	Try        string
	TTFB       string
	FCP        string
	LCP        string
	Metrics    string
	Error      string
	CreatedAt  string
	Tti        string
	CLS        string
	TtiRating  string
	CLSRating  string
	TTFBRating string
	FCPRating  string
	LCPRating  string
	StatusCode string
	Body       string
}{
	ID:         "measurements.id",
	RunID:      "measurements.run_id",
	Website:    "measurements.website",
	URL:        "measurements.url",
	Type:       "measurements.type",
	Try:        "measurements.try",
	TTFB:       "measurements.ttfb",
	FCP:        "measurements.fcp",
	LCP:        "measurements.lcp",
	Metrics:    "measurements.metrics",
	Error:      "measurements.error",
	CreatedAt:  "measurements.created_at",
	Tti:        "measurements.tti",
	CLS:        "measurements.cls",
	TtiRating:  "measurements.tti_rating",
	CLSRating:  "measurements.cls_rating",
	TTFBRating: "measurements.ttfb_rating",
	FCPRating:  "measurements.fcp_rating",
	LCPRating:  "measurements.lcp_rating",
	StatusCode: "measurements.status_code",
	Body:       "measurements.body",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MeasurementWhere = struct {
	ID         whereHelperint
	RunID      whereHelperint
	Website    whereHelperstring
	URL        whereHelperstring
	Type       whereHelperstring
	Try        whereHelperint16
	TTFB       whereHelpernull_String
	FCP        whereHelpernull_String
	LCP        whereHelpernull_String
	Metrics    whereHelpernull_JSON
	Error      whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	Tti        whereHelpernull_String
	CLS        whereHelpernull_String
	TtiRating  whereHelpernull_String
	CLSRating  whereHelpernull_String
	TTFBRating whereHelpernull_String
	FCPRating  whereHelpernull_String
	LCPRating  whereHelpernull_String
	StatusCode whereHelpernull_Int
	Body       whereHelpernull_String
}{
	ID:         whereHelperint{field: "\"measurements\".\"id\""},
	RunID:      whereHelperint{field: "\"measurements\".\"run_id\""},
	Website:    whereHelperstring{field: "\"measurements\".\"website\""},
	URL:        whereHelperstring{field: "\"measurements\".\"url\""},
	Type:       whereHelperstring{field: "\"measurements\".\"type\""},
	Try:        whereHelperint16{field: "\"measurements\".\"try\""},
	TTFB:       whereHelpernull_String{field: "\"measurements\".\"ttfb\""},
	FCP:        whereHelpernull_String{field: "\"measurements\".\"fcp\""},
	LCP:        whereHelpernull_String{field: "\"measurements\".\"lcp\""},
	Metrics:    whereHelpernull_JSON{field: "\"measurements\".\"metrics\""},
	Error:      whereHelpernull_String{field: "\"measurements\".\"error\""},
	CreatedAt:  whereHelpertime_Time{field: "\"measurements\".\"created_at\""},
	Tti:        whereHelpernull_String{field: "\"measurements\".\"tti\""},
	CLS:        whereHelpernull_String{field: "\"measurements\".\"cls\""},
	TtiRating:  whereHelpernull_String{field: "\"measurements\".\"tti_rating\""},
	CLSRating:  whereHelpernull_String{field: "\"measurements\".\"cls_rating\""},
	TTFBRating: whereHelpernull_String{field: "\"measurements\".\"ttfb_rating\""},
	FCPRating:  whereHelpernull_String{field: "\"measurements\".\"fcp_rating\""},
	LCPRating:  whereHelpernull_String{field: "\"measurements\".\"lcp_rating\""},
	StatusCode: whereHelpernull_Int{field: "\"measurements\".\"status_code\""},
	Body:       whereHelpernull_String{field: "\"measurements\".\"body\""},
}

// MeasurementRels is where relationship names are stored.
var MeasurementRels = struct {
	Run string
}{
	Run: "Run",
}

// measurementR is where relationships are stored.
type measurementR struct {
	Run *Run `boil:"Run" json:"Run" toml:"Run" yaml:"Run"`
}

// NewStruct creates a new relationship struct
func (*measurementR) NewStruct() *measurementR {
	return &measurementR{}
}

func (o *Measurement) GetRun() *Run {
	if o == nil {
		return nil
	}

	return o.R.GetRun()
}

func (r *measurementR) GetRun() *Run {
	if r == nil {
		return nil
	}

	return r.Run
}

// measurementL is where Load methods for each relationship are stored.
type measurementL struct{}

var (
	measurementAllColumns            = []string{"id", "run_id", "website", "url", "type", "try", "ttfb", "fcp", "lcp", "metrics", "error", "created_at", "tti", "cls", "tti_rating", "cls_rating", "ttfb_rating", "fcp_rating", "lcp_rating", "status_code", "body"}
	measurementColumnsWithoutDefault = []string{"run_id", "website", "url", "type", "try", "created_at"}
	measurementColumnsWithDefault    = []string{"id", "ttfb", "fcp", "lcp", "metrics", "error", "tti", "cls", "tti_rating", "cls_rating", "ttfb_rating", "fcp_rating", "lcp_rating", "status_code", "body"}
	measurementPrimaryKeyColumns     = []string{"id"}
	measurementGeneratedColumns      = []string{"id"}
)

type (
	// MeasurementSlice is an alias for a slice of pointers to Measurement.
	// This should almost always be used instead of []Measurement.
	MeasurementSlice []*Measurement
	// MeasurementHook is the signature for custom Measurement hook methods
	MeasurementHook func(context.Context, boil.ContextExecutor, *Measurement) error

	measurementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	measurementType                 = reflect.TypeOf(&Measurement{})
	measurementMapping              = queries.MakeStructMapping(measurementType)
	measurementPrimaryKeyMapping, _ = queries.BindMapping(measurementType, measurementMapping, measurementPrimaryKeyColumns)
	measurementInsertCacheMut       sync.RWMutex
	measurementInsertCache          = make(map[string]insertCache)
	measurementUpdateCacheMut       sync.RWMutex
	measurementUpdateCache          = make(map[string]updateCache)
	measurementUpsertCacheMut       sync.RWMutex
	measurementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var measurementAfterSelectMu sync.Mutex
var measurementAfterSelectHooks []MeasurementHook

var measurementBeforeInsertMu sync.Mutex
var measurementBeforeInsertHooks []MeasurementHook
var measurementAfterInsertMu sync.Mutex
var measurementAfterInsertHooks []MeasurementHook

var measurementBeforeUpdateMu sync.Mutex
var measurementBeforeUpdateHooks []MeasurementHook
var measurementAfterUpdateMu sync.Mutex
var measurementAfterUpdateHooks []MeasurementHook

var measurementBeforeDeleteMu sync.Mutex
var measurementBeforeDeleteHooks []MeasurementHook
var measurementAfterDeleteMu sync.Mutex
var measurementAfterDeleteHooks []MeasurementHook

var measurementBeforeUpsertMu sync.Mutex
var measurementBeforeUpsertHooks []MeasurementHook
var measurementAfterUpsertMu sync.Mutex
var measurementAfterUpsertHooks []MeasurementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Measurement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Measurement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Measurement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Measurement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Measurement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Measurement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Measurement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Measurement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Measurement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range measurementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMeasurementHook registers your hook function for all future operations.
func AddMeasurementHook(hookPoint boil.HookPoint, measurementHook MeasurementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		measurementAfterSelectMu.Lock()
		measurementAfterSelectHooks = append(measurementAfterSelectHooks, measurementHook)
		measurementAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		measurementBeforeInsertMu.Lock()
		measurementBeforeInsertHooks = append(measurementBeforeInsertHooks, measurementHook)
		measurementBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		measurementAfterInsertMu.Lock()
		measurementAfterInsertHooks = append(measurementAfterInsertHooks, measurementHook)
		measurementAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		measurementBeforeUpdateMu.Lock()
		measurementBeforeUpdateHooks = append(measurementBeforeUpdateHooks, measurementHook)
		measurementBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		measurementAfterUpdateMu.Lock()
		measurementAfterUpdateHooks = append(measurementAfterUpdateHooks, measurementHook)
		measurementAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		measurementBeforeDeleteMu.Lock()
		measurementBeforeDeleteHooks = append(measurementBeforeDeleteHooks, measurementHook)
		measurementBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		measurementAfterDeleteMu.Lock()
		measurementAfterDeleteHooks = append(measurementAfterDeleteHooks, measurementHook)
		measurementAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		measurementBeforeUpsertMu.Lock()
		measurementBeforeUpsertHooks = append(measurementBeforeUpsertHooks, measurementHook)
		measurementBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		measurementAfterUpsertMu.Lock()
		measurementAfterUpsertHooks = append(measurementAfterUpsertHooks, measurementHook)
		measurementAfterUpsertMu.Unlock()
	}
}

// One returns a single measurement record from the query.
func (q measurementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Measurement, error) {
	o := &Measurement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for measurements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Measurement records from the query.
func (q measurementQuery) All(ctx context.Context, exec boil.ContextExecutor) (MeasurementSlice, error) {
	var o []*Measurement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Measurement slice")
	}

	if len(measurementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Measurement records in the query.
func (q measurementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count measurements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q measurementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if measurements exists")
	}

	return count > 0, nil
}

// Run pointed to by the foreign key.
func (o *Measurement) Run(mods ...qm.QueryMod) runQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RunID),
	}

	queryMods = append(queryMods, mods...)

	return Runs(queryMods...)
}

// LoadRun allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (measurementL) LoadRun(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMeasurement interface{}, mods queries.Applicator) error {
	var slice []*Measurement
	var object *Measurement

	if singular {
		var ok bool
		object, ok = maybeMeasurement.(*Measurement)
		if !ok {
			object = new(Measurement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMeasurement))
			}
		}
	} else {
		s, ok := maybeMeasurement.(*[]*Measurement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMeasurement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &measurementR{}
		}
		args[object.RunID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &measurementR{}
			}

			args[obj.RunID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`runs`),
		qm.WhereIn(`runs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Run")
	}

	var resultSlice []*Run
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Run")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for runs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for runs")
	}

	if len(runAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Run = foreign
		if foreign.R == nil {
			foreign.R = &runR{}
		}
		foreign.R.Measurements = append(foreign.R.Measurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RunID == foreign.ID {
				local.R.Run = foreign
				if foreign.R == nil {
					foreign.R = &runR{}
				}
				foreign.R.Measurements = append(foreign.R.Measurements, local)
				break
			}
		}
	}

	return nil
}

// SetRun of the measurement to the related item.
// Sets o.R.Run to related.
// Adds o to related.R.Measurements.
func (o *Measurement) SetRun(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Run) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"run_id"}),
		strmangle.WhereClause("\"", "\"", 2, measurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RunID = related.ID
	if o.R == nil {
		o.R = &measurementR{
			Run: related,
		}
	} else {
		o.R.Run = related
	}

	if related.R == nil {
		related.R = &runR{
			Measurements: MeasurementSlice{o},
		}
	} else {
		related.R.Measurements = append(related.R.Measurements, o)
	}

	return nil
}

// Measurements retrieves all the records using an executor.
func Measurements(mods ...qm.QueryMod) measurementQuery {
	mods = append(mods, qm.From("\"measurements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"measurements\".*"})
	}

	return measurementQuery{q}
}

// FindMeasurement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMeasurement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Measurement, error) {
	measurementObj := &Measurement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"measurements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, measurementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from measurements")
	}

	if err = measurementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return measurementObj, err
	}

	return measurementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Measurement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no measurements provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measurementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	measurementInsertCacheMut.RLock()
	cache, cached := measurementInsertCache[key]
	measurementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			measurementAllColumns,
			measurementColumnsWithDefault,
			measurementColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, measurementGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(measurementType, measurementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"measurements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"measurements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into measurements")
	}

	if !cached {
		measurementInsertCacheMut.Lock()
		measurementInsertCache[key] = cache
		measurementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Measurement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Measurement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	measurementUpdateCacheMut.RLock()
	cache, cached := measurementUpdateCache[key]
	measurementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			measurementAllColumns,
			measurementPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, measurementGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update measurements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"measurements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, measurementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, append(wl, measurementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update measurements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for measurements")
	}

	if !cached {
		measurementUpdateCacheMut.Lock()
		measurementUpdateCache[key] = cache
		measurementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q measurementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for measurements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MeasurementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, measurementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in measurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all measurement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Measurement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no measurements provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measurementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	measurementUpsertCacheMut.RLock()
	cache, cached := measurementUpsertCache[key]
	measurementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			measurementAllColumns,
			measurementColumnsWithDefault,
			measurementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			measurementAllColumns,
			measurementPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, measurementGeneratedColumns)
		update = strmangle.SetComplement(update, measurementGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert measurements, could not build update column list")
		}

		ret := strmangle.SetComplement(measurementAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(measurementPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert measurements, could not build conflict column list")
			}

			conflict = make([]string, len(measurementPrimaryKeyColumns))
			copy(conflict, measurementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"measurements\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(measurementType, measurementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(measurementType, measurementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert measurements")
	}

	if !cached {
		measurementUpsertCacheMut.Lock()
		measurementUpsertCache[key] = cache
		measurementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Measurement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Measurement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Measurement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), measurementPrimaryKeyMapping)
	sql := "DELETE FROM \"measurements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for measurements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q measurementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no measurementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for measurements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MeasurementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(measurementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, measurementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from measurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for measurements")
	}

	if len(measurementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Measurement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMeasurement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeasurementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MeasurementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"measurements\".* FROM \"measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, measurementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MeasurementSlice")
	}

	*o = slice

	return nil
}

// MeasurementExists checks if the Measurement row exists.
func MeasurementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"measurements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if measurements exists")
	}

	return exists, nil
}

// Exists checks if the Measurement row exists.
func (o *Measurement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MeasurementExists(ctx, exec, o.ID)
}
